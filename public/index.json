[{"categories":["tutorial"],"contents":"They say the best way to learn a language is by immersion so lets kick this off with a hands on explorator lab. The purpose of this lab is to get you into the tools and give you the minimum \u0026lsquo;vocabulary\u0026rsquo; to start crawling in Python. Once you start crawling you can walk, run and then fly, but this process all starts with baby steps. So lets GO!\nNumber 1 - Get Python First step is you need Python. You want Python 3, you can find the download for your operating system here: https://www.python.org/downloads/\nThere are other ways to get Python, especially if you are planning to do a lot of data analysis or artificial intelligence related things you may want to check out Anaconda. This distribution includes the core Python language, but it also includes many data science related packages and tools. Perhaps most importantly it includes the Jupyter notebook framework which allows you to interactively work with Python code, literate descriptions of you code, generate and embed visualizations all in the same pane of glass as your python code, and then easily share your notebooks with others.\nFeel free to start with either Python distribution, but this lab aims to be as simple as possible, so any screenshots, etc will be for the baseline Python distribution.\nNumber 2 - Lauch the Interactive Python Shell I think the instant feedback provided by the Python Shell is immensely valuable for exploration and for beginners it gets you working with the language primatives right away. If you are already familiar with shells in general all you have to do is launch your shell of choice and type \u0026lsquo;python\u0026rsquo;. If you have no clue what a shell is, just go to your OS\u0026rsquo;s app launcher and type \u0026lsquo;IDLE\u0026rsquo;.\n\u0026gt; python Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)] on win32 Type \u0026#34;help\u0026#34;, \u0026#34;copyright\u0026#34;, \u0026#34;credits\u0026#34; or \u0026#34;license\u0026#34; for more information. \u0026gt;\u0026gt;\u0026gt; When you are done with the shell you can EXIT as follows want:\n\u0026gt;\u0026gt;\u0026gt; exit() The first few things we will look at are filesystem related. Python has a \u0026lsquo;batteries included\u0026rsquo; paradigm where the standard python distribution includes the ability to do almost all the common tasks you are likely to need. However, in general Python will not load every single piece of functionality at launch. In general you will often have to tell Python to enable a specific piece of functionality.\nFile System Basics In this case to enable Operating System level functionality such as the file system access, we need to tell Python to IMPORT the \u0026lsquo;os\u0026rsquo; package.\n\u0026gt;\u0026gt;\u0026gt; import os Now we can see where in the file system we currently are by GETting the Current Working Directory:\n\u0026gt;\u0026gt;\u0026gt; os.getcwd() \u0026#39;C:\\\\Users\\\\glintstream\u0026#39; Move to the directory where we want to store our lab files at by CHanging our DIRectory:\n\u0026gt;\u0026gt;\u0026gt; os.chdir(\u0026#39;c:\\\\dev\u0026#39;) Investigating what directories and files are in this location by LISTng the DIRectory contents:\n\u0026gt;\u0026gt;\u0026gt; os.listdir() [\u0026#39;comp-sci\u0026#39;, \u0026#39;intro-to-python\u0026#39;] Creating a workspace for the lab by MaKing a new DIRectory, and then CHanging to that DIRectory:\n\u0026gt;\u0026gt;\u0026gt; os.mkdir(\u0026#39;python-lab\u0026#39;) \u0026gt;\u0026gt;\u0026gt; os.chdir(\u0026#39;python-lab\u0026#39;) Creating a descriptive README.md file for our lab by OPENing a file in Write mode, WRITEing some content, and then CLOSEing the file:\n\u0026gt;\u0026gt;\u0026gt; readme = open(\u0026#39;README.md\u0026#39;,\u0026#39;w\u0026#39;) \u0026gt;\u0026gt;\u0026gt; readme.write(\u0026#39;# Introduction to Python Lab #\u0026#39;) 30 \u0026gt;\u0026gt;\u0026gt; readme.close() Note that when working with files it is EXTREMELY important that you always close files that you open, if not you can encounter all kinds of bad situations. In this case the the contents of the file are not actually written to the file system until the file is closed.\nTo see the contents of the file, we OPEN the file in Read mode, and then READ all LINES, and then CLOSE the file:\n\u0026gt;\u0026gt;\u0026gt; content = open(\u0026#39;README.md\u0026#39;,\u0026#39;r\u0026#39;) \u0026gt;\u0026gt;\u0026gt; content.readlines() [\u0026#39;# Introduction to Python Lab #\u0026#39;] \u0026gt;\u0026gt;\u0026gt; content.close() Subprocesses Basics When coding it is common to want to be able to try out different approaches, sometimes these approaches don\u0026rsquo;t work out, and you want to go back to a previous version of your code. Git. It is pretty easy to execute other executables as subprocesses when working with Python\nWe tell Python to IMPORT the \u0026lsquo;subprocess\u0026rsquo; package\nimport subprocess Next we tell the SUBPROCESS package to OPEN a Process with the \u0026lsquo;git\u0026rsquo; executable and pass it \u0026lsquo;init\u0026rsquo; as a parameter:\nsubprocess.Popen([\u0026#39;git\u0026#39;,\u0026#39;init\u0026#39;]) We tell the SUBPROCESS package to OPEN a Process with the \u0026lsquo;git\u0026rsquo; executable and pass it \u0026lsquo;add\u0026rsquo; and \u0026lsquo;.\u0026rsquo; as parameters:\nsubprocess.Popen([\u0026#39;git\u0026#39;,\u0026#39;add\u0026#39;,\u0026#39;.\u0026#39;]) Finally we tell the SUBRPROCESS package to OPEN a Process with the \u0026lsquo;git\u0026rsquo; executable and pass it the \u0026lsquo;commit\u0026rsquo;, \u0026lsquo;-m\u0026rsquo; and \u0026lsquo;Initial Commit\u0026rsquo; as parameters:\nsubprocess.Popen([\u0026#39;git\u0026#39;,\u0026#39;commit\u0026#39;,\u0026#39;-m\u0026#39;, \u0026#39;Initial Commit\u0026#39;]) Number 3 - 3rd Party packages The next basic part of vocabulary you are going to need is the ability to access the web. It is possible to do this with built in Python packages but the most commonly used web access package is not part of the standard Python distribution. This serves as a good place to cover the important concept of how you can work with 3rd party packages.\nIf you havent done so already you should exit the Python interactive shell:\n\u0026gt;\u0026gt;\u0026gt; exit() Before you can \u0026lsquo;import\u0026rsquo; a Python package in your own code, it needs to be \u0026lsquo;installed\u0026rsquo; on your workstation. \u0026lsquo;Installed\u0026rsquo; in this case basically means the file with contents of the package needs to be in specific locations that the Python distribution is aware of. This model is pretty simple but it leads to a challenge: Over time you will have many different Python projects on your workstation with many different unrelated 3rd party packages. Keeping track of what project uses what 3rd party packages can very quickly become virtually impossible. To help with this, typically in Python you are going to create a separate \u0026lsquo;Virtual Environment\u0026rsquo; for each of your Python projects. This way each project\u0026rsquo;s 3rd Party dependencies will be available to the individual project but isolated from all other projects.\nVirtual Environments A Python virtual environment is actually a fairly simple affair, basically it is two parts: 1. A completely separate directory with the entire Python distribution is copied somewhere onto your hard drive. 2. The system path environment variable for the current process is updated so that its first entry is the path to the virtual env\u0026rsquo;s Python executable\nYou can create this from a standard shell (as opposed to the Python Interactive Shell):\nTell PYTHON to use the Module VENV to create a new virtual environment in the directory .PROJECT-VIRTUAL-ENVIRONMENT\n\u0026gt; python -m venv .project-virtual-environment You have to actually enable to new virtual environment before you can use it, by executing the ACTIVATE (activate.bat on windows, activate.sh on linux) script in the .PROJECT-VIRTUAL-ENVIRONMENT\u0026rsquo;s SCRIPT directory\n\u0026gt; .\\.project-virtual-environment\\Scripts\\activate When you are done with the virtual environment you can disable it by executing the DEACTIVATE command:\n\u0026gt; deactivate Package Installer for Python Python has a built in tool for installing packages called \u0026lsquo;pip\u0026rsquo;. Pip basically searches Python\u0026rsquo;s Package Archive (PyPA), finds the pacakge you are interested in, and downloads the package to a location when the currently executing Python can find it.\nTell PIP to INSTALL the REQUESTS package\npip install requests Tell PIP To LIST all the packages that are currenty\npip list It is common to want to export the list of packages needed by a Python project. Typically this is used when you need to want to share a project with others, its more convient to just provide a list of packages they need rather than providing an entire copy of the your whole virtual environment. This is especially common when using Source Control, to avoid checking in large number of extraneous python scripts and binaries.\nTell PIP to FREEZE the current requirements and redirect the listing to a file called REQUIREMENTS.TXT\npip freeze \u0026gt; requirements.txt Later you can install the current requirements of a Python project\nTell PIP to INSTALL Requirements from the file REQUIREMENTS.TXT\npip install -r requirements.txt Number 4 - Python Modules Typically one is going to execute a program multiple times across multiple days, in those cases it doesnt really make sense to retype your program over and over again in the Python Interactive Shell. In these cases you would save your program as a Python module.\nA Python module is just a text file with the extension \u0026lsquo;.py\u0026rsquo;\nCreate a new file named \u0026lsquo;hello.py\u0026rsquo; and open this file in your text editor of choice. Add the following text to the file:\nprint(\u0026#39;hello from a python module\u0026#39;) From your standard shell (as opposed to the Python Interactive Shell, tell PYTHON to execute HELLO.PY\n\u0026gt; python .\\hello.py hello from a python module Parameters A program that doesn\u0026rsquo;t allow inputs is very limited, it will always do the same exact thing everytime it is executed. There are many ways to provide inputs to programs but a common one is via command line arguements.\nThe \u0026lsquo;sys\u0026rsquo; module has the facility to access arguements passed to a python module.\nIMPORT the SYS package\nimport sys Set the variable called NAME using the SYS package\u0026rsquo;s 2nd(tricky) ARGuement Value\nname = sys.argv[1] PRINT the string HELLO concatenated to the value of the variable called NAME\nprint(\u0026#39;hello, \u0026#39; + name) Tell PYTHON to execute HELLO.PY with the argument STRANGER\n\u0026gt; python .\\hello.py Stranger hello, Stranger Interacting with the web From here on out for the rest of this lab you can chose wether you prefer to program Python from the interactive shell or via python file, the same commands work either way.\nIMPORT the REQUESTS package\n\u0026gt;\u0026gt;\u0026gt; import requests Use the REQUESTS package to execute a http GET of the resource HTTPS://WWW.GOOGLE.COM and store it in a variable called RESPONSE\n\u0026gt;\u0026gt;\u0026gt; response = requests.get(\u0026#39;https://www.google.com\u0026#39;) From here you can examine various fields on the RESPONSE, such as the STATUS_CODE or the TEXT:\n\u0026gt;\u0026gt;\u0026gt; response.status_code 200 \u0026gt;\u0026gt;\u0026gt; response.text \u0026#39;\u0026lt;!doctype html\u0026gt;\u0026lt;html itemscope=\u0026#34;\u0026#34; itemtype=\u0026#34;http://schema.org/WebPage\u0026#34; lang=\u0026#34;en\u0026#34;\u0026gt;... Number 5 - Do something with these fundamental building blocks You have learned how to:\n Use the Interactive Python Shell Import and Use Built-in Python Packages Install, Import an Use 3rd Party Python Packages Use external command line tools from Python Create Python Modules Pass command line arguments to Python Modules Do basic file operations Do basic web requests Print text to the standard output  You should be able to:\n Create a Python Module that takes an url as input and saves the raw html of the website to a file Take the url of an image as an input and download the image and send it to an image compression command line tool like ImageMagik  ","permalink":"/blog/python/","tags":["Python"],"title":"Getting Started With Python"},{"categories":["comp-sci"],"contents":"Project Euler is a series of increasingly difficult Mathematical questions/puzzles that tends to scratch the problem solving itch that many programmer are afflicted with. While they can usually be brute forced via computer programs usually they have an elegant solution that can be worked out with just a pencil and paper. As such at least for programmers it really is up to the individual how much deep thought versus straight coding they want to do, which, I think makes for a pretty good learning curve. When you cant figure out the elegant solution, you can usually find a brute force way through it; When you cant brute force it, you have to sit back, think and usually you can come up with an elegant efficient way to solve the problem. This is pretty similar to the real life challenges in programming really get resolved, first try to come up with a \u0026lsquo;good\u0026rsquo; way to do things, if not then just resolve it by brute force, finally when necessary put in deep thought and or research to really find an efficient solution.\nSo with that being said, going to look at Euler Problem #1:\n If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.\n I remember in fifth grade, my math teacher showed us a very small Basic program (no clue which specific Basic, but it ran on MS-DOS so\u0026hellip;) that would count up to 1 million and print the numbers to the screen. The most awe inspiring part of the lesson was not the program, but the fact that he had to leave the program running until the next day in order for it to complete. Really impressed upon us not only the power of computer programs, but also the shear immensity of the number 1 million. Big ups to Mr Weinstein. I tried to recreate the experience for my son a few years ago, but alas the program finished REALLY quickly. I guess that comes down to Moore\u0026rsquo;s law spoiling the awesomeness of the number 1,000,000, let alone 1000.\nSo in honor of these realities, and because I also want to look at some basic performance comparisons across languages, and in celebration of the inventors of the most powerful and important computing system in the history of the earth lets bump that 1000 up to 10,000,000 (a crore). An before anyone questions wether Hindu-Arabic is arguably the most important computing system invented by humankind, quick tell me what is MCMLXXXVII divided by XVIII? I\u0026rsquo;ll wait, might take a couple hours for you to work out if you dont convert to a place value based system with a representation of zero that allows finite mechanical application of a small set of basic rules to resolve long division. Long division doesn\u0026rsquo;t just fall out of all number systems. This number system is what made calculation, beyond hands and toes possible for the vast majority of society. So for the shear democratization of arithmetic and advancement of mathematics both practical and academic that this system allowed, I think it easily ranks as number 1 computing system in human history. But I digress\u0026hellip;\nLet\u0026rsquo;s get down the summing up all the multiples of 3 or 5 below 10,000,000.\nPowerShell $max = 10000000 - 1 $sum = 0 1..$max | ? { (( $_ % 3 ) -eq 0) -or (($_ % 5) -eq 0) } | % { $sum += $_ } $sum Kind of painful to read, and this is not even the most compressed way to write this in PowerShell. I actually added line breaks and broke out the sum variable to make it a little easier to read. Being 100% fair, the syntax of powershell is optimized for quick input of \u0026lsquo;fire and forget\u0026rsquo; dispatches at the command line. Every ugly weird magically shortcut here, I wouldnt trade away from the language at all because of the speed at which you can crank out PowerShell one liners. But its still ugly and hard to read.\nI checked the performance with hyperfine. Why? Well programs execution is fairly nondeterministic. It can depend on a hundred different things, mostly commonly related to caching/optimizations that the program runtime has made, or contention for resources during execution. As such it is often necessary to let the code execute a bit to \u0026lsquo;warm up\u0026rsquo; and then also to actually execute a reasonable number of times to determine the average run time and variance. hyperfine does this kind of thing for you, without having to do any special coding on your part. The results looked like below:\n❯ hyperfine 'pwsh .\\powershell\\euler.ps1'\rBenchmark #1: pwsh .\\powershell\\euler.ps1 0\rTime (mean ± σ): 135.411 s ± 3.449 s [User: 0.0 ms, System: 5.1 ms] 0\rRange (min … max): 131.319 s … 142.754 s 10 runs\rWhich is pretty significantly slow run on modern hardware clock in at over 2 minutes. I wasnt able to find incredible detail on how PowerShell actually executes, but at a minimum I know there is an interpreter that does a LOT of dynamic indirection related to PSObject and PSCustomObject, and then calls down to .Net code that has to be compiled down (I am assuming) to Microsoft Intermediate Language, and then on execution that MSIL has to be JIT\u0026rsquo;ed (Just In Time converted) to native machine code. It seems at least niavely that this has to be on a line by line basis to enable PowerShell to function as a shell. As such I wasnt surprised it was slow but how slow is slow?\nI was curious to see how another \u0026lsquo;slow\u0026rsquo; interpreted language peformed:\nPython max = 10000000 sum = 0 for i in range(1, max): if i%3==0 or i%5==0: sum += i print(str(sum)) Wow so much more readable, I think perhaps a complete non programmer could look at this and have a decent idea of what is going on, only real headscratchers would be the % modulus functions, the == and += symbol.\n❯ hyperfine 'python .\\python\\euler.py'\rBenchmark #1: python .\\python\\euler.py 0\rTime (mean ± σ): 1.100 s ± 0.036 s [User: 2.9 ms, System: 6.2 ms] 0\rRange (min … max): 1.065 s … 1.147 s 10 runs\rWhats widely regarded as the slowest mainstream programming language is over 100 times faster on this microbenchmark. Even in the realm of popular interpreted dynamic languages such as JavaScript, Lua, Perl, Python is considered dog slow. And lets be crystal clear here:\n Microbenchmarks mean nothing to anything except the very specific exact lines of code in question\n But still 2 orders of magnitude faster, on very simple looping and integer arithmetic.\nThat got me much more curious, what about a decently performant programming language? C# is a relatively performant statically typed compiled language that executes on a virtual machine with a garbage collector.\nC# using System; namespace euler_dotnet { class Program { static void Main(string[] args) { int max = 10000000; Int64 sum = 0; for(int i=0; i \u0026lt; max; i++) { if(((i % 3)==0)||((i % 5)==0)) { sum += i; } } Console.WriteLine(sum.ToString()); } } } First thing we are going to notice looking at the code is how verbose it is, probably 50% of the code is just boilerplate that really has nothing to do with the actually problem we are trying to solve. It is an extremely explict language, thats for sure. Lets see how it performs though.\n❯ dotnet build --configuration Release .\\dotnet\\\r❯ hyperfine 'python '.\\dotnet\\bin\\Release\\netcoreapp3.1\\euler.exe'\rBenchmark #2: .\\dotnet\\bin\\Release\\netcoreapp3.1\\euler.exe\rTime (mean ± σ): 56.5 ms ± 0.6 ms [User: 0.9 ms, System: 2.9 ms] 0\rRange (min … max): 55.9 ms … 59.6 ms 46 runs About 19 times faster than Python off rip. Maybe the trade off between verbosity and performance is worth it. If we are being REALLY fair we also should note the build step, thats the lines that go dotnet build etc. The build step does eat up time on its own. Especially in exploritory development the constant code, build, wait, execute cycle really does slow down development when you take into account a developer does this cycle hundreds of times a day. Both Python and PowerShell, just do the magic to make your code actually execute at runtime.\nI wanted to go one level deeper, and see how a language that compiles down to a single native executable that doesnt depend on a garbage collector. I chose Rust because, frankly last time I tried to teach my 16 year old son C, it blue screened my computer. So lets try the much safer low level language that has been stackoverflow\u0026rsquo;s Most Loved Programming Language for 3 years in a row.\nRust fn main() { let max = 10000000; let mut sum = 0i64; for i in 1..max { if i % 3 == 0 || i % 5 == 0 { sum += i; } } println!(\u0026#34;{}\u0026#34;,sum); } Before we even run it, stands out that it is pretty near to python in readability, sure there are semicolumns everywhere, and the weird 0i64 but\u0026hellip; not anywhere as ugly as PowerShell, nor as long winded as C#.\nHow does it run though?\n❯ cargo build --manifest-path .\\rust\\Cargo.toml --release\r❯ hyperfine '.\\rust\\target\\release\\euler.exe'\rBenchmark #1: .\\rust\\target\\release\\euler.exe 0\rTime (mean ± σ): 15.5 ms ± 0.2 ms [User: 1.0 ms, System: 3.8 ms] 0\rRange (min … max): 15.0 ms … 16.1 ms 143 runs\rSo about 3.6 times faster than C#, about 70 times faster than Python, and about 9,000 times faster than PowerShell. Thats pretty fast. Must be pretty much as fast as possible right?\nMath This series is tagged comp-sci for a reason, so lets try to apply the Queen of the Sciences to help speed up this calculation for us.\nWhat\u0026rsquo;s our overall strategy for solving this problem?\nLets try to divide and conquor this problem by breaking it down into simpler problems. An obvious first step is with the multiples of 3:\n3 + 6 + 9 + 12 + 15 + \u0026hellip; up to whatever the largest multiple of 3 is thats less than 10,000,000\nI can make a reasonable guess for the largest multiple of 3 less than 10,000,000 just off the top of my head, but I wouldn\u0026rsquo;t necessarily know \u0026lsquo;how\u0026rsquo; I figured it out.\nWhen in doubt go back to first principals. What\u0026rsquo;s the definition of the terms you are using?\nThe largest multiple of 3 less than 10,000,000 is literally the largest number less than 10,000,000 that can be divided by 3 perfectly. Lets start with 10,000,000/3 = 3,333,333.333333\u0026hellip; the decimal is the part that didnt perfectly divide. So just throwing that away by rounding down we get 3,333,333. If we multiply by 3 x 3,333,333 we get 9,999,999 as the largest multiple of 3 thats less than 10,000,000.\nWe didnt use any special properties of the number 3 or 10,000,000 to get here, so this seems to be a general rule: The largest multiple of any number (Y) less than some number (MAX) is always going to be = Y times the whole number part of MAX/Y. The round down function is often in programming languages called the\u0026rsquo;floor\u0026rsquo; and multiplication is commonly shown in programming languages by the symbol \u0026lsquo;*\u0026rsquo;. So Y * floor(MAX/Y).\nCan we check that this is valid?\nLets apply this to find out what the largest multiple of 5 less than 10,000,000 is by applying the formula 5 * floor(10,000,000/5) = 10,000,000. Which is NOT less than 10,000,000. Turns out that we were using a special property of 3 ad 10,000,000, that 3 doesn\u0026rsquo;t evenly divide 10,000,000. We can patch this edge case by just subtracting 1 from the MAX to guarantee we truly only look for multiples less than MAX.\nmultiple of Y less than MAX = Y * floor((MAX-1)/Y)\nBack to our problem:\n3 + 6 + 9 + 12 + 15 + \u0026hellip; + 9,999,999 still is a mystery. Maybe we can find some form of this sequence that is more basic? At its simplest it just the 3 multiplication table:\n3 * 1 + 3 * 2 + 3 * 3 + \u0026hellip; 3 * 3,333,333 = 3 * (1 + 2 + 3 + 4 + 5 + \u0026hellip; 3,333,333)\nThis seems like we are going in the right direction its not clear how to move on from here. A really powerful tool in problem solving is visualizing the problem. Why is this so powerful? It turns out something like 2/3rds of the human brain is involved in the processing of visual information, and almost all of our intuition for judging relationships between proportions is especially tied to vision.\nSo when I am stuck I always start with sketching an quick diagram to visualize the problem i am trying to solve.\nImmediately it jumps out that the sequence 1 + 2 + 3 + 4 + \u0026hellip; + n forms a stairway shape. If we could just figure out a formula for inside the stairway shape, we would have a formula to caluculate the sum of integers from 1 to n.\nDoes this problem look like a simplier problem I know how to solve already?\nThe most obvious thing my intuition sees is that this looks like a triangle, so let me draw the line and see how close to a triangle this really is?\nWith the line drawn, it clearly seems there is one very large triangle with a right angle and 2 sides that each measure n units, and n little triangles with a right angle and 2 sides that each measure 1 unit. so\narea of 1 n by n triangle + area of n 1 by 1 triangle\nWhat\u0026rsquo;s the area of a triangle?\nWhen you actually sketch it out and let your visual brain do the work its obvious that the area of the triangle is just one half of the area of a square that is n on each side.\n(n * n * 1 / 2) + n * (1 * 1 * 1 / 2) = (n*n + n)/2 = n(n + 1)/2\nSo now we know how to calculate the sum of 1 + 2 + 3 + .. + n. Lets take apply what we have so far:\n3 + 6 + 9 + 12 + 15 + \u0026hellip; + 9,999,999 = 3 * floor((10,000,000-1)/3) * (floor((10,000,000-1)/3)+ 1) / 2\nplus\n5 + 10 + 15 + 20 + 25 + \u0026hellip; + 9,999,995 5 * floor((10,000,000-1)/5) * (floor((10,000,000-1)/5) + 1) / 2\nAre there any edge cases that we have to account for?\n15 appears in both of these sequences, in fact every multiple of 15 is going to appear in both lists because 3 is a multiple of 15 and 5 is a multiple of 15. This can be resolved by subtraction the multiples of 15 less than 10,000,000 from our sum.\nThis seems like the answer and all i did to get there was ask myself questions.\n By asking yourself the right questions at the right time you can raise your IQ by 20 points.\n I often see developers cramming to master specific algorithms to nail interviews. I personally think that this information is great to know, but it\u0026rsquo;s more important to learn how to go about problem solving. A great resource to move from relying purely on intuition to solve problems into a more structured approach is the classic by How to Solve It by Poyla.\nThe last shall become first In PowerShell our more sophisticated approach would look like:\n$max = 10000000 - 1 $threes = 3 * ([math]::Floor($max / 3))*([math]::Floor($max / 3) + 1) / 2 $fives = 5 * ([math]::Floor($max / 5))*([math]::Floor($max / 5) + 1) / 2 $fifteens = 15 * ([math]::Floor($max / 15))*([math]::Floor($max / 15) + 1) / 2 $threes + $fives - $fifteens Evaluating the performance of this is kind of difficult because it turns out just executing a completely empty PowerShell script takes orders of magnitude more time than calculating this value.\n❯ hyperfine 'pwsh .\\powershell\\empty.ps1'\rBenchmark #1: pwsh .\\powershell\\empty.ps1 0\rTime (mean ± σ): 339.4 ms ± 5.4 ms [User: 0.0 ms, System: 5.7 ms] 1\rRange (min … max): 333.6 ms … 351.3 ms 10 runs\rPowerShell provides its own tooling to measure timing of commands called unoriginally enough, Measure-Command. Measure-Command will allow you to handily exclude the raw start up time of powershell executing an empty file from your benchmark. Also the faster languages like C# and Rust have a compilation step. It turns out PowerShell also has an implicit compilation step, the first time you execute something in PowerShell it is MUCH slower than subsequent executions. For this reason I am going to execute the statement 1 time, and then take the average of 10 runs of the PowerShell calculation being executed.\n$max = 10000000 function calculate { param($max) $max = $max - 1 $threes = 3 * ([math]::Floor($max / 3))*([math]::Floor($max / 3) + 1) / 2 $fives = 5 * ([math]::Floor($max / 5))*([math]::Floor($max / 5) + 1) / 2 $fifteens = 15 * ([math]::Floor($max / 15))*([math]::Floor($max / 15) + 1) / 2 $threes + $fives - $fifteens } $compilePerformance = Measure-Command { calculate $max } \u0026#34;First run: $($compilePerformance.TotalMilliseconds)ms\u0026#34; 1..20 | Foreach-Object { Measure-Command{ calculate $max } } | Measure-Object -Property TotalMilliseconds -AllStats ❯ pwsh .\\powershell\\euler-math.ps1\rFirst run: 14.4644 ms\rCount : 10\rAverage : 0.7273\rSum : 7.273\rMaximum : 5.7032\rMinimum : 0.0586\rStandardDeviation : 1.77348886911897\rProperty : TotalMilliseconds\rSo we are able to get approximately the same performance with our slowest language PowerShell (14.46 ms) as our fastest language Rust (15.5 ms) if we only look at intial execution. If we exclude the compilation step for each of these laguages, the gap in performance widens, with the algorithmically sophisticated PowerShell being about 20 times faster than the niave Rust implementation.\nWhat did we learn? Well really we just experimentally proved a couple old adadges in Computer Science/Programming.\nNumber 1 : Pretty much all modern programming langauges are fast enough. Even dirt slow PowerShell\u0026rsquo;s niave implementation clocking in around 2 minutes is probably less than the amount of time it would take implement the code, compile it and run it in the fastest language Rust. If you really just need the value one time they are all \u0026lsquo;fast\u0026rsquo; enough.\nNumber 2 : If speed really does matter, applying an efficient algorithm to the bottlenecks of your system is going to have way bigger impact than just rewriting the whole thing in a fast language.\nNumber 3 : PowerShell is slow as hell\nI leave off with the Gza Genius:\n At the height of their fame and glory, they turned on one another\nEach struggling in vain for ultimate supremacy\nIn the passion and depth of their struggle\nThe very art that had raised them to such Olympian heights was lost\n   ","permalink":"/blog/on-programming-language-performance/","tags":["Programming"],"title":"On Programming Language Performance"},{"categories":["square-biz"],"contents":"How a self-trained junior non-developer out delivered an entire IT department. You read the byline and thought: bullshit, or if you were being generous maybe: hyperbole. Maybe, just maybe, you thought well it might of happened with an exceptional \u0026lsquo;junior\u0026rsquo; in age, but \u0026lsquo;senior\u0026rsquo; in skills developer. Even if you gave it credence, you figured this was a one off exception that was not repeatable.\nReality is it isn\u0026rsquo;t bullshit or hyperbole. The junior non developer was not particularly talented technology wise. Further this isnt a one off, this same scenario played out at least four times over the course of a 3 month span.\nEven more fundamentally important: this scenario is playing out day in and day out, in organizations both large and small, across all business sectors and geographies.\nForget the model of offshoring to find technical resources at a cut rate price, business departments are moving to a model of just doing the technical work themselves having found enterprise Information Technology resources to be to slow.\nLet\u0026rsquo;s walk through the scenario step by step, and you tell me if this sounds familiar: Business department X works intimately with popular 3rd party Analytics data. This data is so important that eventually they want to pull down the data from the 3rd party to be able to store it internally and perform more intensive processing/reporting/analytics/visualization of the historical data.\nProject Planning They approach their enterprise IT department to do help them out with this. The Business gets directed to the IT Project Management Office (PMO). PMO puts together a project plan, schedules a meeting with the business, collects some semblence of requirements, packages the project plan and requirements together, and puts it in a queue to be prioritized for work by IT management, this takes 1 week. The Business need is not directly tied to a major initiative that IT is being judged by at the C Level, and the Business requestor doesn\u0026rsquo;t have a personal relationship with anyone in IT to get their need prioritized. So this package of work gets prioritized as low, and sits in the IT backlog for 3 months. Honestly, 3 months is a good deal in this scenario, usually once a low priority item enters the enterprise IT backlog it NEVER gets worked on.\nDevelopment Eventually this project ends up on the desk of whatever team is responsible for the enterprise\u0026rsquo;s Electronic Load and Transform (ETL), lets call them the Data team. The Data team looks at the high level requirements, notices some inconsistencies/gaps in the requirements, and sends it to PMO for a Business Analyst (BA) to work out with the Business. This happens a couple times, taking in total 1 week.\nThe Data team eventually gets consistent requirments they can understand, and start development of an ETL process leveraging whatever is their standard enterprise toolkit, In this case they are a \u0026lsquo;MicroSoft Shop\u0026rsquo; so lets say their stack is:\n Secure FTP for moving the files into the enterprise network SQL Server Integration Services to pick up and transform the data MicroSoft SQL Server to store the data SQL Server Reporting Services to display the report and allow download of the raw data in various formats  The actual development of whatever ETL process takes 1 week\nTesting Now its ready to be QA\u0026rsquo;ed, well not really because of course there is the need to set up Development, QA, Staging and Production instances of the SQL Server database. Including setting up the necessary environments, QA team review of the requirements and development of test cases, and actually executing the test cases takes another 1 week\nIt passes QA it is done! We just need to move it to Production!\nUser Testing It goes to User Acceptance Testing at which point the Business gets their first look at their reports, and wouldnt you know it, it just doesnt meet expectations. The report\u0026rsquo;s don\u0026rsquo;t lay out the data right, the report takes too long to run, there is duplicate data coming in that needs to be deduplicated, there are tons of missing fields that need to have default values, the reports parameters dont allow slicing the data the way the business needs. Of cource a big sprinkling of plan and simple requirements changes in addition. Got to send it back for some more development, some more QA and then another Business review. Another 1 week.\nChange Management Moving it to Production involves getting firewalls opened, whitelisting IPs for SFTP access, shared network drives allocated, domain accounts provisioned, etc. The Data team needs the Infrastructure team to get involved, and the Infrastructure team has its own process requiring change management tickets, approvals from high level management, and the like, so throw on another 1 week.\nDuring the mandated Change Manegement Meeting before the release to Production, the Security hears about the project for the first time. The Security team starts to ask questions. What type of data is being stored? Is there any customer personally identifiable information (PII)? How is the data at rest secured? How is the data in flight protected? All these questions have to be answered and if any gaps encountered remediated. So lets throw on another 1 week.\nIt finally passes Change Management and is delivered to Production!\nRollOut Immediately the process crashes, turns out Production wasn\u0026rsquo;t identical to Development, and the sample data that the system was designed around wasn\u0026rsquo;t really representative of data the 3rd party was actually sending. Another final 1 week cleaning all of this up to get it working reliably.\nYeah! Adding all that time up, 5 months from the Business\u0026rsquo;s perspective between when they engaged IT and they were able to get the process reliably in place.\nIf you have any experience with Enterprise Information Technology I am sure you were rolling your eyes every single time I mentioned an additional 1 week. You understood this to, first off be a very optimistic estimate for any of these tasks, and secondly a common refrain for late projects. As in \u0026lsquo;Yes, we missed the deadline but we just have to push through 1 more week to get it out. It\u0026rsquo;s never really 1 week is it?\nThe project is effectively dead at this point, the business need came and went. The Competitor already pulled in their data, leveraged it, and got whatever competative advantage there was to get. The Competitor\u0026rsquo;s Business had already been burned by their IT Department, so they didnt even bother to go to them in the first place. They got one of their younger less expensive knowledge workers to just manually collect the data.\nHe didnt know any better\u0026hellip; So he just assumed the task was supposed to be simple. He asked the third party to send him emails with the data as attachements. He started getting the data every day as a \u0026lsquo;CSV\u0026rsquo; file. His company was also a \u0026lsquo;MicroSoft Shop\u0026rsquo; so he imported it into his Office 365 Excel app. He tweaked the data in Excel dropping rows and cleaning it up.\nHe made some charts but, wanted something he didnt need to send files around with, that he could share as a link in the browser. A couple google searches later and he had his data pumped into Power BI and created his first dashboard. When he showed it to his direct manager, it was so compelling and so cheap that there wasnt a second thought to get approval to get Power BI associated to his Office 365 account.\nHe was getting tired of constantly uploading CSV files, so he spent some more time googling, found a tutorial and learned how to use Power Automate to upload the attachements of any email he received with a specific subject to Power BI. There was all kinds of weird data issues that were discovered over time, constantly tweaked his Power BI dashboard until it was what his team needed. It took him 2 weeks start to finish. It worked so well he got tasked with 3 other integrations back to back, all of which he was able to bang out in weeks not months.\nEventually the dashboards became widely used and the data became so important that it needed to be centralized, only at that point did they engage their enterprise IT department, who was able to integrate it into the organization\u0026rsquo;s MicroSoft Dynamics 365 via a few clicks of administrative user interface without any custom development or new infrastructure.\nThe names have been changed to protect the guilty The specifics might differ but the story is real, and these scenarios are playing out day by day. Tasks that once required cooridination between experts on multiple enterprise IT teams are now being done by individual technology novices. There isn\u0026rsquo;t the disconnect and disappointment at the end of the cycle because the business expert is beyond involved in the process he is the actual implementer.\nBut what about security, what about change management, what about dedicated QA, what about all the patterns and practices of ETL developers who have made this their career bring to the table? All valid points, but fundamentally, these concerns are subservient to the business needs. There is no business leader I am aware of that would prefer to wait 5 months for a dashboard he can have in 2 weeks. In the words of the legend\u0026hellip;\n If lovin\u0026rsquo; you is wrong\nI don\u0026rsquo;t wanna be right\nIf being right means being without you\nI\u0026rsquo;d rather live a wrong doing life\n   ","permalink":"/blog/democratization/","tags":["Business"],"title":"Democratization"},{"categories":["square-biz"],"contents":"Hype or Automation? That\u0026rsquo;s a good question, as there seems to be a wide range of answers. However the basic idea behind HyperAutomation to envision your automation journey as travel upwards to higher levels of automation that build on the capabilities introduced in the previous levels.\n The ground floor starts with previous years\u0026rsquo; Gartner darling, Robotic Process Automation (RPA), which is essentially the application of small simple rule based programs which can automate repetative work. Now, imagine if you could apply RPA to all your low level business processes? Not only is the repetative work automated, but beyond that now every single process and/or transaction can also be captured as a digital event and the structured data associated with that event. These events could be analyzed by a digital \u0026lsquo;brain\u0026rsquo; that could then apply logic of arbitrary complexity and automatically trigger other business events without human intervention or with human approval if required. Rich workflows could be created to orchestrate complex interactions between dozens of disparate business processes via these events. On top of the previous layer of transactional automated business processing, Machine Learning algorithms can analyze the raw business event stream to generate new insights into what makes your business tick, and provide N-dimensional reporting and forecasting in realtime for human consumption. Furthermore this stream of digital events and the complex interactions between the constituent parts could be thought of as a Digital Twin that exactly maps to your real world business. Data Science can be used to analyze this Digital Twin, to unearth relationships between component business processes beyond human intuition. Modern Artificial Intelligence can apply a wide range of cutting edge optimiztion algorithms, run millions of simulations of what would happen to your real world business if a given change is made, select the best outcomes ranked along any chosen weighting criteria, and then provide recommendations for C-level executives along with the data to back it up.  Let me be clear this is not science fiction, this is not a pipe dream, this is not just hype and buzzword bingo. However this is also not new to 2020, in any shape, form, or fashion. This is the self same \u0026lsquo;digitial transformation\u0026rsquo; that has been chased for almost 2 decades at this point. The main difference between this year\u0026rsquo;s take on \u0026lsquo;digital transformation\u0026rsquo; and the previous years\u0026rsquo;, if there is one, is the idea that the transformation starts at the leaf nodes. It starts at the low level business processes being taken over by RPA. There is a certain compelling rationality to this.\nInstead of going for the incredibly complex migration to a new multi-multimillion dollar CRM or ERP platform, building out a risky (Micro)Service Oriented Architecture that might never actually see adoption across your enterprise even if successfully developed, or any of the other big bang top down approaches to digital transformation why not go at it from the opposite direction? Start with digitizing the dozens or even hundreds of simple processes that make up your business with RPA. Each individual automation of a single business process is a relatively small but concrete win that provides immediate real world bottomline value to the business. The best thing about this approach is you can afford to fail on a given automation attempt, still reap the benefits from your other successful automation attempts, get up, dust your knees off and try again. Once you have completed this leaf-node automation phase, proven your capability and aquired digital transformation competence, then take on the more complex components. Honestly this is just the proven industry standard iterative development philosophy writ large.\n  ","permalink":"/blog/hyperautomation/","tags":["Business"],"title":"HyperAutomation"},{"categories":["square-biz"],"contents":"Foundation of Execution On the startup side of the industry, the most commonly talked about business strategies revolve around Disruption. But, for my money no one has ever put it as eloquently as the young brooklyn kid who actually disrupted his field with brutal efficiency.\n Everybody has a plan until they get punched in the mouth - Mike Tyson\n On the other side of the software game, in the Enterprise, equally cliche is the oft stated strategy of Agility. I think the famous slightly sped up clip of a 19 year old Mike Tyson going through his paces during a training session makes the point better than any words ever could: Mike knows Agility too.\nNeither Disruption or Agility are strategies. Disruption is an outcome. Agility is a resource. A strategy is the focused forward looking plan followed with driving dedictation, and implementated with unrelenting discipline in persuit of a long term goal that enables even longer term goals.\nIn the case of Mike Tyson, the strategy was the regime of training, the endless cardio, the expert selection of the most efficient and powerful movements, the grinding repetition to encode these movements in muscle memory. This is how one aquires Agility.\nA lifetime of study of the fundamentals of the sweet science, the accurate assessment of opponents weakness, relentless destruction of ones own weaknesses resulting in impregnible defence, the absolute mastery of psychological warfare, and the relentless training necessary to build that world famous and world shattering power. That is how Disruption is actualized.\nUnderstanding what is and isn\u0026rsquo;t a strategy is probably the first step in actually implementing one. As with anything, the study of the history is the most likely the best way to predict the future. The seminal Strategy: A History maybe too much of a tome for casual reading, but in audio book format is an engaging and entertaining primer on the matter.\nFrom the perspective of the Enterprise and it\u0026rsquo;s love/hate relationship with Information Technology in particular, I keep going back to the fundamentals of Enterprise Architecture As Strategy: Creating a Foundation for Business Execution. This blog owes a lot of its fundations to the theories exposed by this book.\nStrategic Technology Trends for 2020  Through the lights, camera, action, glamour, glitter and gold, I unfold the scroll\n Enterprise Information Technology\u0026rsquo;s favorite problematic bae has released Gartner Top 10 Strategic Technology Trends for 2020. One cannot escape the logical incongruence of the term \u0026lsquo;strategy\u0026rsquo; being applied to the term \u0026lsquo;trend\u0026rsquo;, fundamentally if your IT strategy changes every 12 months you have no strategy. Also, opinion\u0026rsquo;s on Gartner vary, and vary, and vary. Regardless of what you feel about Gartner as a business entity, the reliability of their analysis, or their outsized impact on the hype cycle, they unequivocally are thought leaders that the majority of CIO\u0026rsquo;s turn to for guidance. Understanding the influences on those who control the purse strings is never a bad bet in any business related strategy, so in the next couple blog posts I am going to dive into what I think are the most interesting of Gartner\u0026rsquo;s top 10.\nRead more about\u0026hellip; HyperAutomation  Read more about\u0026hellip; Democratization In the best of times any real world competitive strategy has to take into account imperfect information, and 2020 in particular may be the blackest swan on record. As such, I am going to end this with a big red cherry on top with the best strategic advice on the block\u0026hellip;\n From the Womb to the Tomb, Presume the Unpredictable - Nasir Jones\n   ","permalink":"/blog/strategic-foci/","tags":["Business"],"title":"Strategic Foci"},{"categories":["square-biz"],"contents":"Enterprise Information Technology is about to get caught with it’s pants down.  The New Office looks a lot like the Old Office except you don’t get any points for ‘looking’ busy.\n There was a time when enterprise profit centers had no real choice but to rely on their internal information technology departments. Projects took 3 months just to clear to the hurdles of resource allocation and change management. That time was 2019.\nIn 2020, 58% of knowledge workers are now working remotely and that’s only the beginning of the sea change.\nFor the last 15 years the single biggest strategic decision point in corporate IT was ‘on shoring’ versus ‘off shoring’. In a world where the vast majority of knowledge workers are working remotely, there is no difference between ‘onshore’ and ‘offshore’. That’s an old mindset that just went the way of the dodo bird.\nTwo Words: Managed Services  There’s a war going on outside no man is safe from. You can run but you can’t hide forever.\n   The Dodo Bird, The Giant Ground Sloth, The Eastman Kodak Company. There is a certain kind of organism that manages to thrive in isolation, yet completely collapses in the face of competition and predation. The world is about to come to grips with the reality that the vast majority of enterprise information technology departments fall into this category.\nImagine a world where delivery matters. Where execution matters. Where profit centers contract directly with streamlined efficient providers whos only way to survive is their ability to deliver… on spec, on time, on budget.\nSurvival of the fit. Only the strong survive. ","permalink":"/blog/welcome-to-the-new-office/","tags":["Business"],"title":"Welcome to the New Office"}]